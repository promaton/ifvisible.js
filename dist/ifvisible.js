!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var s=e();for(var i in s)("object"==typeof exports?exports:t)[i]=s[i]}}(window,(function(){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}({"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(t,e){var s;s=function(){return this}();try{s=s||new Function("return this")()}catch(t){"object"==typeof window&&(s=window)}t.exports=s},"./src/Events.ts":
/*!***********************!*\
  !*** ./src/Events.ts ***!
  \***********************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Events=void 0,function(t){const e={};let s;t.attach=function(t,s){e[t]||(e[t]=[]),e[t].push(s)},t.fire=function(t,s=[]){e[t]&&e[t].forEach(t=>{t(...s)})},t.remove=function(t,s){s||delete e[t],e[t]&&(e[t]=e[t].filter(t=>s!==t))},t.dom=function(t,e,i){return s||(s=t.addEventListener?(t,e,s)=>t.addEventListener(e,s,!1):"function"==typeof t.attachEvent?(t,e,s)=>t.attachEvent("on"+e,s,!1):(t,e,s)=>t["on"+e]=s),s(t,e,i)}}(e.Events||(e.Events={}))},"./src/Timer.ts":
/*!**********************!*\
  !*** ./src/Timer.ts ***!
  \**********************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(/*! ./ifvisible */"./src/ifvisible.ts");e.default=class{constructor(t,e,s){this.ifvisible=t,this.seconds=e,this.callback=s,this.stopped=!1,this.start(),this.ifvisible.on("statusChanged",t=>{!1===this.stopped&&(t.status===i.STATUS_ACTIVE?this.start():this.pause())})}start(){this.stopped=!1,clearInterval(this.token),this.token=setInterval(this.callback,1e3*this.seconds)}stop(){this.stopped=!0,clearInterval(this.token)}resume(){this.start()}pause(){this.stop()}}},"./src/ifvisible.ts":
/*!**************************!*\
  !*** ./src/ifvisible.ts ***!
  \**************************/
/*! no static exports found */function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IfVisible=e.IE=e.STATUS_HIDDEN=e.STATUS_IDLE=e.STATUS_ACTIVE=void 0;const i=s(/*! ./Events */"./src/Events.ts"),n=s(/*! ./Timer */"./src/Timer.ts");let o,r;e.STATUS_ACTIVE="active",e.STATUS_IDLE="idle",e.STATUS_HIDDEN="hidden",e.IE=function(){let t=3;const e=document.createElement("div"),s=e.getElementsByTagName("i");for(;e.innerHTML=`\x3c!--[if gt IE ${++t}]><i></i><![endif]--\x3e`,s[0];);return t>4?t:void 0}();e.IfVisible=class{constructor(t,s){if(this.root=t,this.doc=s,this.status=e.STATUS_ACTIVE,this.VERSION="2.0.11",this.timers=[],this.idleTime=3e4,this.isLegacyModeOn=!1,void 0!==this.doc.hidden?(o="hidden",r="visibilitychange"):void 0!==this.doc.mozHidden?(o="mozHidden",r="mozvisibilitychange"):void 0!==this.doc.msHidden?(o="msHidden",r="msvisibilitychange"):void 0!==this.doc.webkitHidden&&(o="webkitHidden",r="webkitvisibilitychange"),void 0===o)this.legacyMode();else{const t=()=>{this.doc[o]?this.blur():this.focus()};t(),i.Events.dom(this.doc,r,t)}this.startIdleTimer(),this.trackIdleStatus()}legacyMode(){if(this.isLegacyModeOn)return;let t="blur";e.IE<9&&(t="focusout"),i.Events.dom(this.root,t,()=>this.blur()),i.Events.dom(this.root,"focus",()=>this.focus()),this.isLegacyModeOn=!0}startIdleTimer(t){t instanceof MouseEvent&&0===t.movementX&&0===t.movementY||(this.timers.map(clearTimeout),this.timers.length=0,this.status===e.STATUS_IDLE&&this.wakeup(),this.idleStartedTime=+new Date,this.timers.push(setTimeout(()=>{if(this.status===e.STATUS_ACTIVE||this.status===e.STATUS_HIDDEN)return this.idle()},this.idleTime)))}trackIdleStatus(){i.Events.dom(this.doc,"mousemove",this.startIdleTimer.bind(this)),i.Events.dom(this.doc,"mousedown",this.startIdleTimer.bind(this)),i.Events.dom(this.doc,"keyup",this.startIdleTimer.bind(this)),i.Events.dom(this.doc,"touchstart",this.startIdleTimer.bind(this)),i.Events.dom(this.root,"scroll",this.startIdleTimer.bind(this)),this.focus(this.startIdleTimer.bind(this))}on(t,e){return i.Events.attach(t,e),this}off(t,e){return i.Events.remove(t,e),this}setIdleDuration(t){return this.idleTime=1e3*t,this.startIdleTimer(),this}getIdleDuration(){return this.idleTime}getIdleInfo(){const t=+new Date;let s;if(this.status===e.STATUS_IDLE)s={isIdle:!0,idleFor:t-this.idleStartedTime,timeLeft:0,timeLeftPer:100};else{const e=this.idleStartedTime+this.idleTime-t;s={isIdle:!1,idleFor:t-this.idleStartedTime,timeLeft:e,timeLeftPer:parseFloat((100-100*e/this.idleTime).toFixed(2))}}return s}idle(t){return t?this.on("idle",t):(this.status=e.STATUS_IDLE,i.Events.fire("idle"),i.Events.fire("statusChanged",[{status:this.status}])),this}blur(t){return t?this.on("blur",t):(this.status=e.STATUS_HIDDEN,i.Events.fire("blur"),i.Events.fire("statusChanged",[{status:this.status}])),this}focus(t){return t?this.on("focus",t):this.status!==e.STATUS_ACTIVE&&(this.status=e.STATUS_ACTIVE,i.Events.fire("focus"),i.Events.fire("wakeup"),i.Events.fire("statusChanged",[{status:this.status}])),this}wakeup(t){return t?this.on("wakeup",t):this.status!==e.STATUS_ACTIVE&&(this.status=e.STATUS_ACTIVE,i.Events.fire("wakeup"),i.Events.fire("statusChanged",[{status:this.status}])),this}onEvery(t,e){return new n.default(this,t,e)}now(t){return void 0!==t?this.status===t:this.status===e.STATUS_ACTIVE}}},"./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */function(t,e,s){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.ifvisible=void 0;const i=s(/*! ./ifvisible */"./src/ifvisible.ts"),n="object"==typeof self&&self.self===self&&self||"object"==typeof t&&t.global===t&&t||this;e.ifvisible=new i.IfVisible(n,document)}).call(this,s(/*! ./../node_modules/webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */function(t,e,s){t.exports=s(/*! ./src/main.ts */"./src/main.ts")}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9FdmVudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RpbWVyLnRzIiwid2VicGFjazovLy8uL3NyYy9pZnZpc2libGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiYSIsImkiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIkV2ZW50cyIsInN0b3JlIiwic2V0TGlzdGVuZXIiLCJhdHRhY2giLCJldmVudCIsImNhbGxiYWNrIiwicHVzaCIsImZpcmUiLCJhcmdzIiwiZm9yRWFjaCIsInJlbW92ZSIsImZpbHRlciIsInNhdmVkQ2FsbGJhY2siLCJkb20iLCJlbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImVsIiwiZXYiLCJmbiIsImF0dGFjaEV2ZW50IiwiaWZ2aXNpYmxlIiwic2Vjb25kcyIsInN0b3BwZWQiLCJzdGFydCIsIm9uIiwiZGF0YSIsInN0YXR1cyIsIlNUQVRVU19BQ1RJVkUiLCJwYXVzZSIsImNsZWFySW50ZXJ2YWwiLCJ0b2tlbiIsInNldEludGVydmFsIiwic3RvcCIsIkRPQ19ISURERU4iLCJWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCIsIlNUQVRVU19JRExFIiwiU1RBVFVTX0hJRERFTiIsIklFIiwidiIsImRpdiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFsbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5uZXJIVE1MIiwidW5kZWYiLCJkb2MiLCJWRVJTSU9OIiwidGltZXJzIiwiaWRsZVRpbWUiLCJpc0xlZ2FjeU1vZGVPbiIsInVuZGVmaW5lZCIsImhpZGRlbiIsIm1vekhpZGRlbiIsIm1zSGlkZGVuIiwid2Via2l0SGlkZGVuIiwibGVnYWN5TW9kZSIsInRyYWNrQ2hhbmdlIiwiYmx1ciIsImZvY3VzIiwic3RhcnRJZGxlVGltZXIiLCJ0cmFja0lkbGVTdGF0dXMiLCJCTFVSX0VWRU5UIiwiTW91c2VFdmVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIm1hcCIsImNsZWFyVGltZW91dCIsImxlbmd0aCIsIndha2V1cCIsImlkbGVTdGFydGVkVGltZSIsIkRhdGUiLCJzZXRUaW1lb3V0IiwiaWRsZSIsIm5vdyIsInJlcyIsImlzSWRsZSIsImlkbGVGb3IiLCJ0aW1lTGVmdCIsInRpbWVMZWZ0UGVyIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJjaGVjayIsInNlbGYiLCJnbG9iYWwiLCJJZlZpc2libGUiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUNoRCxHQUFzQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxTQUNiLEdBQXFCLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsT0FDUCxDQUNKLElBQUlLLEVBQUlMLElBQ1IsSUFBSSxJQUFJTSxLQUFLRCxHQUF1QixpQkFBWkosUUFBdUJBLFFBQVVGLEdBQU1PLEdBQUtELEVBQUVDLElBUHhF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QUdsQyxJQUFLNkUsR0FDSCxZQUFjL0IsSUFBVitCLEVBQ0tyRixLQUFLNkIsU0FBV3dELEVBRWxCckYsS0FBSzZCLFNBQVcsRUFBQUMsaUI7Ozs7NElDdk8zQixrREFJTTFFLEVBQXdCLGlCQUFUa0ksTUFBcUJBLEtBQUtBLE9BQVNBLE1BQVFBLE1BQzdCLGlCQUFYQyxHQUF1QkEsRUFBT0EsU0FBV0EsR0FBVUEsR0FDM0R2RixLQUVILEVBQUF1QixVQUFZLElBQUksRUFBQWlFLFVBQVVwSSxFQUFNdUYsWSIsImZpbGUiOiJpZnZpc2libGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJleHBvcnQgbmFtZXNwYWNlIEV2ZW50cyB7XG4gIGNvbnN0IHN0b3JlID0ge307XG4gIGxldCBzZXRMaXN0ZW5lcjogRnVuY3Rpb247XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaCAoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgaWYgKCFzdG9yZVtldmVudF0pIHtcbiAgICAgIHN0b3JlW2V2ZW50XSA9IFtdO1xuICAgIH1cbiAgICBzdG9yZVtldmVudF0ucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZmlyZSAoZXZlbnQ6IHN0cmluZywgYXJncyA9IFtdKSB7XG4gICAgaWYgKHN0b3JlW2V2ZW50XSkge1xuICAgICAgc3RvcmVbZXZlbnRdLmZvckVhY2goY2FsbGJhY2sgPT4ge1xuICAgICAgICBjYWxsYmFjayguLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW1vdmUgKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBkZWxldGUgc3RvcmVbZXZlbnRdO1xuICAgIH1cbiAgICBpZiAoc3RvcmVbZXZlbnRdKSB7XG4gICAgICBzdG9yZVtldmVudF0gPSBzdG9yZVtldmVudF0uZmlsdGVyKHNhdmVkQ2FsbGJhY2sgPT4ge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sgIT09IHNhdmVkQ2FsbGJhY2s7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZG9tIChlbGVtZW50OiBhbnksIGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgIGlmICghc2V0TGlzdGVuZXIpIHtcbiAgICAgIGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgc2V0TGlzdGVuZXIgPSAoZWwsIGV2LCBmbikgPT4ge1xuICAgICAgICAgIHJldHVybiBlbC5hZGRFdmVudExpc3RlbmVyKGV2LCBmbiwgZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5hdHRhY2hFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzZXRMaXN0ZW5lciA9IChlbCwgZXYsIGZuKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGVsLmF0dGFjaEV2ZW50KGBvbiR7ZXZ9YCwgZm4sIGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldExpc3RlbmVyID0gKGVsLCBldiwgZm4pID0+IHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmV0dXJuLWFzc2lnbiwgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICByZXR1cm4gZWxbYG9uJHtldn1gXSA9IGZuO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2V0TGlzdGVuZXIoZWxlbWVudCwgZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG4vLyBleHBvcnQgZGVmYXVsdCBFdmVudHM7XG4iLCJpbXBvcnQgeyBJZlZpc2libGUsIFNUQVRVU19BQ1RJVkUgfSBmcm9tICcuL2lmdmlzaWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVyIHtcbiAgcHJpdmF0ZSB0b2tlbjogbnVtYmVyO1xuXG4gIHN0b3BwZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBpZnZpc2libGU6IElmVmlzaWJsZSxcbiAgICBwcml2YXRlIHNlY29uZHM6IG51bWJlcixcbiAgICBwcml2YXRlIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgIHRoaXMuc3RhcnQoKTtcblxuICAgIHRoaXMuaWZ2aXNpYmxlLm9uKCdzdGF0dXNDaGFuZ2VkJywgKGRhdGE6IGFueSkgPT4ge1xuICAgICAgaWYgKHRoaXMuc3RvcHBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSBTVEFUVVNfQUNUSVZFKSB7XG4gICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGFydCAoKSB7XG4gICAgdGhpcy5zdG9wcGVkID0gZmFsc2U7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRva2VuKTtcbiAgICB0aGlzLnRva2VuID0gc2V0SW50ZXJ2YWwodGhpcy5jYWxsYmFjaywgdGhpcy5zZWNvbmRzICogMTAwMCk7XG4gIH1cblxuICBzdG9wICgpIHtcbiAgICB0aGlzLnN0b3BwZWQgPSB0cnVlO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50b2tlbik7XG4gIH1cblxuICByZXN1bWUgKCkge1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxuXG4gIHBhdXNlICgpIHtcbiAgICB0aGlzLnN0b3AoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSAnLi9FdmVudHMnO1xuaW1wb3J0IFRpbWVyIGZyb20gJy4vVGltZXInO1xuXG5leHBvcnQgY29uc3QgU1RBVFVTX0FDVElWRSA9ICdhY3RpdmUnO1xuZXhwb3J0IGNvbnN0IFNUQVRVU19JRExFID0gJ2lkbGUnO1xuZXhwb3J0IGNvbnN0IFNUQVRVU19ISURERU4gPSAnaGlkZGVuJztcbi8vIGRlY2xhcmUgdmFyIF9fVkVSU0lPTl9fOiBzdHJpbmc7XG5sZXQgRE9DX0hJRERFTjogc3RyaW5nO1xubGV0IFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5UOiBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUlkbGVJbmZvIHtcbiAgaXNJZGxlOiBib29sZWFuO1xuICBpZGxlRm9yOiBudW1iZXI7XG4gIHRpbWVMZWZ0OiBudW1iZXI7XG4gIHRpbWVMZWZ0UGVyOiBudW1iZXI7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5leHBvcnQgY29uc3QgSUUgPSAoZnVuY3Rpb24gKCkge1xuICBsZXQgdW5kZWY7XG4gIGxldCB2ID0gMztcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGFsbCA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaScpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuICB3aGlsZSAoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzLCBuby1zZXF1ZW5jZXNcbiAgICBkaXYuaW5uZXJIVE1MID0gYDwhLS1baWYgZ3QgSUUgJHsrK3Z9XT48aT48L2k+PCFbZW5kaWZdLS0+YCxcbiAgICBhbGxbMF1cbiAgKTtcblxuICByZXR1cm4gdiA+IDQgPyB2IDogdW5kZWY7XG59KCkpO1xuXG5leHBvcnQgY2xhc3MgSWZWaXNpYmxlIHtcbiAgc3RhdHVzOiBzdHJpbmcgPSBTVEFUVVNfQUNUSVZFO1xuXG4gIFZFUlNJT04gPSAnMi4wLjExJztcblxuICBwcml2YXRlIHRpbWVyczogbnVtYmVyW10gPSBbXTtcblxuICBwcml2YXRlIGlkbGVUaW1lOiBudW1iZXIgPSAzMDAwMDtcblxuICBwcml2YXRlIGlkbGVTdGFydGVkVGltZTogbnVtYmVyO1xuXG4gIHByaXZhdGUgaXNMZWdhY3lNb2RlT24gPSBmYWxzZTtcblxuXG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIHJvb3QsIHByaXZhdGUgZG9jKSB7XG4gICAgLy8gRmluZCBjb3JyZWN0IGJyb3dzZXIgZXZlbnRzXG4gICAgaWYgKHRoaXMuZG9jLmhpZGRlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBET0NfSElEREVOID0gJ2hpZGRlbic7XG4gICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZG9jLm1vekhpZGRlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBET0NfSElEREVOID0gJ21vekhpZGRlbic7XG4gICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZG9jLm1zSGlkZGVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIERPQ19ISURERU4gPSAnbXNIaWRkZW4nO1xuICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQgPSAnbXN2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZG9jLndlYmtpdEhpZGRlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBET0NfSElEREVOID0gJ3dlYmtpdEhpZGRlbic7XG4gICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICB9XG5cbiAgICBpZiAoRE9DX0hJRERFTiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmxlZ2FjeU1vZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdHJhY2tDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmRvY1tET0NfSElEREVOXSkge1xuICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRyYWNrQ2hhbmdlKCk7IC8vIGdldCBpbml0aWFsIHN0YXR1c1xuICAgICAgRXZlbnRzLmRvbSh0aGlzLmRvYywgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsIHRyYWNrQ2hhbmdlKTtcbiAgICB9XG4gICAgdGhpcy5zdGFydElkbGVUaW1lcigpO1xuICAgIHRoaXMudHJhY2tJZGxlU3RhdHVzKCk7XG4gIH1cblxuICBsZWdhY3lNb2RlICgpIHtcbiAgICAvLyBpdCdzIGFscmVhZHkgb25cbiAgICBpZiAodGhpcy5pc0xlZ2FjeU1vZGVPbikgeyByZXR1cm47IH1cblxuICAgIGxldCBCTFVSX0VWRU5UID0gJ2JsdXInO1xuICAgIGNvbnN0IEZPQ1VTX0VWRU5UID0gJ2ZvY3VzJztcblxuICAgIGlmIChJRSA8IDkpIHtcbiAgICAgIEJMVVJfRVZFTlQgPSAnZm9jdXNvdXQnO1xuICAgIH1cblxuICAgIEV2ZW50cy5kb20odGhpcy5yb290LCBCTFVSX0VWRU5ULCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5ibHVyKCk7XG4gICAgfSk7XG5cbiAgICBFdmVudHMuZG9tKHRoaXMucm9vdCwgRk9DVVNfRVZFTlQsICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmZvY3VzKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmlzTGVnYWN5TW9kZU9uID0gdHJ1ZTtcbiAgfVxuXG4gIHN0YXJ0SWRsZVRpbWVyIChldmVudD86IEV2ZW50KSB7XG4gICAgLy8gUHJldmVudHMgUGhhbnRvbSBldmVudHMuXG4gICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vc2Vya2FueWVyc2VuL2lmdmlzaWJsZS5qcy9wdWxsLzM3XG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudCAmJiBldmVudC5tb3ZlbWVudFggPT09IDAgJiYgZXZlbnQubW92ZW1lbnRZID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50aW1lcnMubWFwKGNsZWFyVGltZW91dCk7XG4gICAgdGhpcy50aW1lcnMubGVuZ3RoID0gMDsgLy8gY2xlYXIgdGhlIGFycmF5XG5cbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IFNUQVRVU19JRExFKSB7XG4gICAgICB0aGlzLndha2V1cCgpO1xuICAgIH1cblxuICAgIHRoaXMuaWRsZVN0YXJ0ZWRUaW1lID0gKyhuZXcgRGF0ZSgpKTtcblxuICAgIHRoaXMudGltZXJzLnB1c2goc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFNUQVRVU19BQ1RJVkUgfHwgdGhpcy5zdGF0dXMgPT09IFNUQVRVU19ISURERU4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRsZSgpO1xuICAgICAgfVxuICAgIH0sIHRoaXMuaWRsZVRpbWUpKTtcbiAgfVxuXG4gIHRyYWNrSWRsZVN0YXR1cyAoKSB7XG4gICAgRXZlbnRzLmRvbSh0aGlzLmRvYywgJ21vdXNlbW92ZScsIHRoaXMuc3RhcnRJZGxlVGltZXIuYmluZCh0aGlzKSk7XG4gICAgRXZlbnRzLmRvbSh0aGlzLmRvYywgJ21vdXNlZG93bicsIHRoaXMuc3RhcnRJZGxlVGltZXIuYmluZCh0aGlzKSk7XG4gICAgRXZlbnRzLmRvbSh0aGlzLmRvYywgJ2tleXVwJywgdGhpcy5zdGFydElkbGVUaW1lci5iaW5kKHRoaXMpKTtcbiAgICBFdmVudHMuZG9tKHRoaXMuZG9jLCAndG91Y2hzdGFydCcsIHRoaXMuc3RhcnRJZGxlVGltZXIuYmluZCh0aGlzKSk7XG4gICAgRXZlbnRzLmRvbSh0aGlzLnJvb3QsICdzY3JvbGwnLCB0aGlzLnN0YXJ0SWRsZVRpbWVyLmJpbmQodGhpcykpO1xuICAgIC8vIFdoZW4gcGFnZSBpcyBmb2N1cyB3aXRob3V0IGFueSBldmVudCwgaXQgc2hvdWxkIG5vdCBiZSBpZGxlLlxuICAgIHRoaXMuZm9jdXModGhpcy5zdGFydElkbGVUaW1lci5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIG9uIChldmVudDogc3RyaW5nLCBjYWxsYmFjazogKGRhdGE6IGFueSkgPT4gYW55KTogSWZWaXNpYmxlIHtcbiAgICBFdmVudHMuYXR0YWNoKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBvZmYgKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrPzogYW55KTogSWZWaXNpYmxlIHtcbiAgICBFdmVudHMucmVtb3ZlKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRJZGxlRHVyYXRpb24gKHNlY29uZHM6IG51bWJlcik6IElmVmlzaWJsZSB7XG4gICAgdGhpcy5pZGxlVGltZSA9IHNlY29uZHMgKiAxMDAwO1xuICAgIHRoaXMuc3RhcnRJZGxlVGltZXIoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldElkbGVEdXJhdGlvbiAoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pZGxlVGltZTtcbiAgfVxuXG4gIGdldElkbGVJbmZvICgpOiBJSWRsZUluZm8ge1xuICAgIGNvbnN0IG5vdyA9ICsobmV3IERhdGUoKSk7XG4gICAgbGV0IHJlczogSUlkbGVJbmZvO1xuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gU1RBVFVTX0lETEUpIHtcbiAgICAgIHJlcyA9IHtcbiAgICAgICAgaXNJZGxlOiB0cnVlLFxuICAgICAgICBpZGxlRm9yOiBub3cgLSB0aGlzLmlkbGVTdGFydGVkVGltZSxcbiAgICAgICAgdGltZUxlZnQ6IDAsXG4gICAgICAgIHRpbWVMZWZ0UGVyOiAxMDAsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0aW1lTGVmdCA9ICh0aGlzLmlkbGVTdGFydGVkVGltZSArIHRoaXMuaWRsZVRpbWUpIC0gbm93O1xuICAgICAgcmVzID0ge1xuICAgICAgICBpc0lkbGU6IGZhbHNlLFxuICAgICAgICBpZGxlRm9yOiBub3cgLSB0aGlzLmlkbGVTdGFydGVkVGltZSxcbiAgICAgICAgdGltZUxlZnQsXG4gICAgICAgIHRpbWVMZWZ0UGVyOiBwYXJzZUZsb2F0KCgxMDAgLSAodGltZUxlZnQgKiAxMDAgLyB0aGlzLmlkbGVUaW1lKSkudG9GaXhlZCgyKSksXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgaWRsZSAoY2FsbGJhY2s/OiAoZGF0YTogYW55KSA9PiBhbnkpOiBJZlZpc2libGUge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5vbignaWRsZScsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0dXMgPSBTVEFUVVNfSURMRTtcbiAgICAgIEV2ZW50cy5maXJlKCdpZGxlJyk7XG4gICAgICBFdmVudHMuZmlyZSgnc3RhdHVzQ2hhbmdlZCcsIFt7IHN0YXR1czogdGhpcy5zdGF0dXMgfV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGJsdXIgKGNhbGxiYWNrPzogKGRhdGE6IGFueSkgPT4gYW55KTogSWZWaXNpYmxlIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub24oJ2JsdXInLCBjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdHVzID0gU1RBVFVTX0hJRERFTjtcbiAgICAgIEV2ZW50cy5maXJlKCdibHVyJyk7XG4gICAgICBFdmVudHMuZmlyZSgnc3RhdHVzQ2hhbmdlZCcsIFt7IHN0YXR1czogdGhpcy5zdGF0dXMgfV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZvY3VzIChjYWxsYmFjaz86IChkYXRhOiBhbnkpID0+IGFueSk6IElmVmlzaWJsZSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uKCdmb2N1cycsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdHVzICE9PSBTVEFUVVNfQUNUSVZFKSB7XG4gICAgICB0aGlzLnN0YXR1cyA9IFNUQVRVU19BQ1RJVkU7XG4gICAgICBFdmVudHMuZmlyZSgnZm9jdXMnKTtcbiAgICAgIEV2ZW50cy5maXJlKCd3YWtldXAnKTtcbiAgICAgIEV2ZW50cy5maXJlKCdzdGF0dXNDaGFuZ2VkJywgW3sgc3RhdHVzOiB0aGlzLnN0YXR1cyB9XSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgd2FrZXVwIChjYWxsYmFjaz86IChkYXRhOiBhbnkpID0+IGFueSk6IElmVmlzaWJsZSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uKCd3YWtldXAnLCBjYWxsYmFjayk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXR1cyAhPT0gU1RBVFVTX0FDVElWRSkge1xuICAgICAgdGhpcy5zdGF0dXMgPSBTVEFUVVNfQUNUSVZFO1xuICAgICAgRXZlbnRzLmZpcmUoJ3dha2V1cCcpO1xuICAgICAgRXZlbnRzLmZpcmUoJ3N0YXR1c0NoYW5nZWQnLCBbeyBzdGF0dXM6IHRoaXMuc3RhdHVzIH1dKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBvbkV2ZXJ5IChzZWNvbmRzOiBudW1iZXIsIGNhbGxiYWNrOiBGdW5jdGlvbik6IFRpbWVyIHtcbiAgICByZXR1cm4gbmV3IFRpbWVyKHRoaXMsIHNlY29uZHMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIG5vdyAoY2hlY2s/OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoY2hlY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzID09PSBjaGVjaztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzID09PSBTVEFUVVNfQUNUSVZFO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJZlZpc2libGUgfSBmcm9tICcuL2lmdmlzaWJsZSc7XG5cbmRlY2xhcmUgbGV0IGdsb2JhbDogYW55O1xuLy8gZGVjaWRlIGJldHdlZW4gc2VsZiB2cyBnbG9iYWwgZGVwZW5kaW5nIG9uIHRoZSBlbnZpcm9ubWVudFxuY29uc3Qgcm9vdCA9ICh0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcgJiYgc2VsZi5zZWxmID09PSBzZWxmICYmIHNlbGYpXG4gICAgICAgICAgICAgfHwgKHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnICYmIGdsb2JhbC5nbG9iYWwgPT09IGdsb2JhbCAmJiBnbG9iYWwpXG4gICAgICAgICAgICAgfHwgdGhpcztcblxuZXhwb3J0IGNvbnN0IGlmdmlzaWJsZSA9IG5ldyBJZlZpc2libGUocm9vdCwgZG9jdW1lbnQpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==